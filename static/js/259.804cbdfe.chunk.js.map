{"version":3,"file":"static/js/259.804cbdfe.chunk.js","mappings":"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","sources":["pages/TrainingPage/TrainingPage.styled.tsx","components/MyTraining/MyTraining.styled.tsx","components/TrainingListActive/TrainingListActive.styled.tsx","components/TrainingListActive/TrainingListActive.tsx","components/Timer/Timer.styled.tsx","components/Timer/Timer.tsx","components/MyTraining/MyTraining.tsx","components/MyGoals/MyGoals.styled.tsx","components/MyGoals/MyGoals.tsx","components/MyTrainingResults/MyTrainingResults.styled.tsx","components/MyTrainingResults/MyTrainingResults.tsx","components/MyTrainingRegistration/MyTrainingRegistration.styled.tsx","components/TrainingList/TrainingList.styled.tsx","components/TrainingList/TrainingList.tsx","components/MyTrainingRegistration/MyTrainingRegistration.tsx","components/Modal/Modal.styled.tsx","components/Modal/Modal.tsx","pages/TrainingPage/TrainingPage.tsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Container = styled.div``;\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div``;\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div``;\n","import { Container } from './TrainingListActive.styled';\n\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Paper from '@mui/material/Paper';\n\nimport { useAppSelector } from '../../redux/hooks';\nimport { getPlanningBooks } from '../../redux/planning/planningSlice';\n\nexport const TrainingListActive = () => {\n  const planningBooks = useAppSelector(getPlanningBooks);\n\n  return (\n    <Container>\n      <TableContainer component={Paper}>\n        <Table sx={{ minWidth: 650 }} aria-label=\"simple table\">\n          <TableHead>\n            <TableRow>\n              <TableCell align=\"left\">Book title</TableCell>\n              <TableCell align=\"left\">Author</TableCell>\n              <TableCell align=\"left\">Year</TableCell>\n              <TableCell align=\"left\">Pages</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {planningBooks.map(row => (\n              <TableRow\n                key={row._id}\n                sx={{ '&:last-of-type td, &:last-of-type th': { border: 0 } }}\n              >\n                <TableCell align=\"left\">\n                  {row.pagesTotal === row.pagesFinished ? 'true' : 'false'}' '\n                  {row.title}\n                </TableCell>\n                <TableCell align=\"left\">{row.author}</TableCell>\n                <TableCell align=\"left\">{row.publishYear}</TableCell>\n                <TableCell align=\"left\">{row.pagesTotal}</TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </Container>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div``;\n","import { Container } from './Timer.styled';\nimport { useState, useEffect } from 'react';\nimport { useAppSelector } from '../../redux/hooks';\nimport { getEndDate } from '../../redux/planning/planningSlice';\nimport dayjs from 'dayjs';\nimport { useAppDispatch } from '../../redux/hooks';\nimport { finishPlanning } from '../../redux/planning/planningSlice';\nimport { timeDifferenceProcessor } from '../../helpers';\n\nexport const Timer = () => {\n  const dispatch = useAppDispatch();\n\n  const endDate = useAppSelector(getEndDate);\n\n  //to test how timer ends\n  // const endDate = Date.now() + 20000;\n\n  const [timeLeft, setTimeLeft] = useState(dayjs(endDate).diff(dayjs()));\n\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      if (dayjs(endDate).diff(dayjs()) >= 0) {\n        setTimeLeft(dayjs(endDate).diff(dayjs()));\n      } else {\n        setTimeLeft(0);\n        dispatch(finishPlanning('fail'));\n        clearInterval(intervalId);\n      }\n    }, 1000);\n    return () => {\n      clearInterval(intervalId);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <Container>\n      <dl>\n        <div>\n          <dt>\n            {timeDifferenceProcessor(timeLeft).d.toString().padStart(2, '0')}\n          </dt>\n          <dd>Days</dd>\n        </div>\n        <div>\n          <dt>\n            {timeDifferenceProcessor(timeLeft).h.toString().padStart(2, '0')}\n          </dt>\n          <dd>Hrs</dd>\n        </div>\n        <div>\n          <dt>\n            {timeDifferenceProcessor(timeLeft).m.toString().padStart(2, '0')}\n          </dt>\n          <dd>Minutes</dd>\n        </div>\n        <div>\n          <dt>\n            {timeDifferenceProcessor(timeLeft).s.toString().padStart(2, '0')}\n          </dt>\n          <dd>Seconds</dd>\n        </div>\n      </dl>\n    </Container>\n  );\n};\n","import { Container } from './MyTraining.styled';\nimport { TrainingListActive } from '../TrainingListActive/TrainingListActive';\nimport { Timer } from '../Timer/Timer';\n\nexport const MyTraining = () => {\n  return (\n    <Container>\n      <Timer></Timer>\n      <TrainingListActive></TrainingListActive>\n    </Container>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div``;\n","import { Container } from './MyGoals.styled';\nimport { useAppSelector } from '../../redux/hooks';\nimport {\n  getPlanningFromStore,\n  getStartDate,\n  getEndDate,\n  getPlanningId,\n} from '../../redux/planning/planningSlice';\nimport { IMyGoalsProps } from '../../interfaces';\nimport { getCurrentBookNumber } from '../../helpers';\n\nimport dayjs from 'dayjs';\n\nexport const MyGoals = ({\n  trainingBookList,\n  planningStartDate,\n  planningEndDate,\n}: IMyGoalsProps) => {\n  const planning = useAppSelector(getPlanningFromStore);\n  console.log(trainingBookList);\n\n  const startDate = useAppSelector(getStartDate);\n  const endDate = useAppSelector(getEndDate);\n  const planningId = useAppSelector(getPlanningId);\n\n  if (planningId) {\n    console.log('BOOKS COUNTER');\n    console.log(getCurrentBookNumber(planning.books));\n  }\n\n  return (\n    <Container>\n      <h2>My goals</h2>\n      <ul className=\"goals-body\">\n        <li className=\"goal\">\n          <p>{planningId ? planning.books.length : trainingBookList.length}</p>\n          <p>Amount of books</p>\n        </li>\n        <li className=\"goal\">\n          <p>\n            {planningId\n              ? dayjs(endDate).diff(dayjs(startDate), 'day')\n              : dayjs(planningEndDate).diff(planningStartDate, 'day') || 0}\n          </p>\n          <p>Amount of days</p>\n        </li>\n        {planningId && (\n          <li className=\"goal\">\n            <p>\n              {planning.books.length - getCurrentBookNumber(planning.books) + 1}\n            </p>\n            <p>Books left</p>\n          </li>\n        )}\n      </ul>\n    </Container>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div``;\n","import { useState, useEffect } from 'react';\nimport { Container } from './MyTrainingResults.styled';\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\nimport { LocalizationProvider } from '@mui/x-date-pickers';\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport dayjs from 'dayjs';\nimport { TextField } from '@mui/material';\nimport { getPlanningFromStore } from '../../redux/planning/planningSlice';\nimport { nanoid } from 'nanoid';\nimport { getPlanningLoadingStatus } from '../../redux/planning/planningSlice';\nimport { useAppSelector, useAppDispatch } from '../../redux/hooks';\nimport { getPlanningStats } from '../../redux/planning/planningSlice';\nimport { updatePlanning } from '../../redux/planning/operations';\n\nimport { getCurrentBook } from '../../helpers';\n\nimport { useFormik } from 'formik';\nimport { finishPlanning } from '../../redux/planning/planningSlice';\nimport * as yup from 'yup';\nimport { IPlanningStat } from '../../interfaces';\n\nexport const MyTrainingResults = () => {\n  const planning = useAppSelector(getPlanningFromStore);\n  const status = useAppSelector(getPlanningLoadingStatus);\n  const stats = useAppSelector(getPlanningStats);\n  const dispatch = useAppDispatch();\n\n  const [pagesLimit, setPagesLimit] = useState(0);\n  const currentBook = getCurrentBook(planning.books);\n\n  useEffect(() => {\n    if (status === 'fulfilled') {\n      if (currentBook) {\n        setPagesLimit(currentBook.pagesTotal - currentBook.pagesFinished);\n      } else {\n        setPagesLimit(0);\n        dispatch(finishPlanning('success'));\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentBook, status]);\n\n  const validationSchema = yup.object({\n    pages: yup\n      .number()\n      .min(1, 'Please enter a valid value')\n      .max(pagesLimit, `You have only ${pagesLimit} pages left in this book`)\n      .required('This field is required'),\n  });\n\n  const formik = useFormik({\n    initialValues: {\n      pages: 0,\n    },\n    validationSchema: validationSchema,\n    onSubmit: values => {\n      console.log(values);\n\n      dispatch(updatePlanning(values));\n      formik.resetForm();\n    },\n  });\n\n  const statsHandler = (stats: IPlanningStat[]) => {\n    const statsArray = [...Object.values(stats)];\n\n    if (statsArray.length <= 5) {\n      return statsArray;\n    }\n\n    return statsArray.filter((item, i, arr) => i + 1 > arr.length - 5);\n  };\n\n  const statsToShow = statsHandler(stats);\n\n  return (\n    <Container>\n      <form onSubmit={formik.handleSubmit}>\n        <LocalizationProvider dateAdapter={AdapterDayjs}>\n          <DatePicker label=\"Date\" defaultValue={dayjs()} disabled />\n        </LocalizationProvider>\n\n        <TextField\n          id=\"outlined-basic\"\n          label=\"Amount of pages\"\n          variant=\"outlined\"\n          type=\"number\"\n          name=\"pages\"\n          value={formik.values.pages}\n          onChange={formik.handleChange}\n          helperText={formik.touched.pages && formik.errors.pages}\n        />\n\n        <button type=\"submit\">Add result</button>\n      </form>\n\n      <div className=\"results-container\">\n        <h3>Statistics</h3>\n        {status === 'fulfilled'\n          ? statsToShow.map(item => (\n              <li key={nanoid()}>\n                <p>{item.time}</p>\n                <p>{item.pagesCount}</p>\n              </li>\n            ))\n          : null}\n      </div>\n    </Container>\n  );\n};\n","import styled from '@emotion/styled';\nimport { IStyledProps } from '../../interfaces';\n\nexport const Container = styled.form<IStyledProps>``;\n","import styled from '@emotion/styled';\nimport { IStyledProps } from '../../interfaces';\n\nexport const Container = styled.div<IStyledProps>``;\n","import { Container } from './TrainingList.styled';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Paper from '@mui/material/Paper';\nimport { ITrainingList } from '../../interfaces';\n\nexport const TrainingList = ({\n  trainingList,\n  removeFromTrainingListHandler,\n}: ITrainingList) => {\n  return (\n    <Container>\n      <TableContainer component={Paper}>\n        <Table sx={{ minWidth: 650 }} aria-label=\"simple table\">\n          <TableHead>\n            <TableRow>\n              <TableCell align=\"left\">Book title</TableCell>\n              <TableCell align=\"left\">Author</TableCell>\n              <TableCell align=\"left\">Year</TableCell>\n              <TableCell align=\"left\">Pages</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {trainingList.map(row => (\n              <TableRow\n                key={row._id}\n                sx={{ '&:last-of-type td, &:last-of-type th': { border: 0 } }}\n              >\n                <TableCell align=\"left\">{row.title}</TableCell>\n                <TableCell align=\"left\">{row.author}</TableCell>\n                <TableCell align=\"left\">{row.publishYear}</TableCell>\n                <TableCell align=\"left\">{row.pagesTotal}</TableCell>\n                <TableCell align=\"left\">\n                  <button\n                    type=\"button\"\n                    onClick={() => {\n                      console.log(row);\n                      removeFromTrainingListHandler(row._id);\n                    }}\n                  >\n                    D\n                  </button>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </Container>\n  );\n};\n","import { Container } from './MyTrainingRegistration.styled';\n\nimport { TrainingList } from '../TrainingList/TrainingList';\n\nimport dayjs from 'dayjs';\nimport { useState } from 'react';\n\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\nimport { LocalizationProvider } from '@mui/x-date-pickers';\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport { Autocomplete } from '@mui/material';\nimport TextField from '@mui/material/TextField';\nimport { IBookData, IMyTrainingProps } from '../../interfaces';\nimport { useAppSelector, useAppDispatch } from '../../redux/hooks';\n\nimport { getGoingToRead } from '../../redux/auth/authSlice';\n\nimport { createPlanning } from '../../redux/planning/operations';\nimport { getCurrentlyReading } from '../../redux/auth/authSlice';\n\n// const initialState = [] as IBookData[];\n// const initialCurrentBook = {} as IBookData;\n\nexport const MyTrainingRegistration = ({\n  trainingBookList,\n  startDate,\n  endDate,\n  updateTrainingBookList,\n  updateStartDate,\n  updateEndDate,\n}: IMyTrainingProps) => {\n  // const isLoggedIn = useAppSelector(getIsLoggedIn);\n\n  console.log(trainingBookList);\n\n  const dispatch = useAppDispatch();\n  // useEffect(() => {\n  //   if (isLoggedIn) {\n  //     dispatch(getPlanning());\n  //     console.log('something');\n  //   }\n  //   // eslint-disable-next-line react-hooks/exhaustive-deps\n  // }, [isLoggedIn]);\n\n  const getCurrentDate = () => {\n    return dayjs().format('YYYY-MM-DD');\n  };\n\n  // const [trainingBookList, setTrainingBookList] = useState(initialState);\n  // const [startDate, setStartDate] = useState(getCurrentDate());\n  // const [endDate, setEndDate] = useState('');\n\n  const [currentBook, setCurrentBook] = useState<IBookData | null>(null);\n\n  const formSubmitHandler = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const queryBody = {\n      startDate,\n      endDate,\n      books: trainingBookList.map(item => item._id),\n    };\n\n    dispatch(createPlanning(queryBody));\n    console.log(queryBody);\n  };\n\n  const goingToRead = useAppSelector(getGoingToRead);\n  const currentlyReading = useAppSelector(getCurrentlyReading);\n\n  const booksList = [\n    ...goingToRead.map(item => ({ ...item, label: item.title })),\n    ...currentlyReading.map(item => ({ ...item, label: item.title })),\n  ];\n\n  const addToTrainingBookListHandler = (bookData: IBookData) => {\n    console.log('addToTrainingBookListHandler');\n    if (bookData && !trainingBookList.find(item => item._id === bookData._id)) {\n      const { title, author, publishYear, pagesTotal, _id, pagesFinished } =\n        bookData;\n      updateTrainingBookList([\n        ...trainingBookList,\n        { title, author, publishYear, pagesTotal, _id, pagesFinished },\n      ]);\n    }\n  };\n\n  const removeFromTrainingBookListHandler = (id: string) => {\n    updateTrainingBookList(\n      trainingBookList.filter((item: IBookData) => item._id !== id)\n    );\n  };\n\n  // useEffect(() => {\n  //   window.addEventListener('beforeunload', alertUser)\n  //   window.addEventListener('unload', handleEndConcert)\n  //   return () => {\n  //     window.removeEventListener('beforeunload', alertUser)\n  //     window.removeEventListener('unload', handleEndConcert)\n  //   }\n  // }, [])\n\n  // const handleEndConcert = async () => {\n  //   await fetcher({\n  //     url: endConcert(concert.id),\n  //     method: 'PUT'\n  //   })\n  // }\n\n  return (\n    <Container onSubmit={formSubmitHandler}>\n      <h2>My training</h2>\n\n      <div className=\"date-input-container\">\n        <LocalizationProvider dateAdapter={AdapterDayjs}>\n          <DatePicker\n            label=\"Start\"\n            defaultValue={dayjs(getCurrentDate())}\n            onChange={newValue => {\n              if (newValue) {\n                updateStartDate(newValue.format('YYYY-MM-DD'));\n              }\n            }}\n            disabled\n          />\n        </LocalizationProvider>\n        <LocalizationProvider dateAdapter={AdapterDayjs}>\n          <DatePicker\n            label=\"Finish\"\n            onChange={newValue => {\n              if (newValue) {\n                updateEndDate(newValue.format('YYYY-MM-DD'));\n              }\n            }}\n            disablePast\n            minDate={dayjs().add(1, 'day')}\n          />\n        </LocalizationProvider>\n      </div>\n      <div className=\"books-input-container\">\n        <Autocomplete\n          onChange={(event: any, book: IBookData | null) => {\n            if (book) {\n              console.log(book);\n              setCurrentBook(book);\n            }\n          }}\n          value={currentBook}\n          disablePortal\n          isOptionEqualToValue={(option, value) => {\n            return option._id === value._id;\n          }}\n          id=\"combo-box-demo\"\n          options={booksList}\n          sx={{ width: 300 }}\n          renderInput={params => (\n            <TextField {...params} label=\"Choose books from the library \" />\n          )}\n        />\n        <button\n          type=\"button\"\n          onClick={() => {\n            if (currentBook) {\n              addToTrainingBookListHandler(currentBook);\n              setCurrentBook(null);\n            }\n          }}\n        >\n          Add\n        </button>\n\n        <button type=\"submit\">Start training</button>\n      </div>\n      <TrainingList\n        trainingList={trainingBookList}\n        removeFromTrainingListHandler={removeFromTrainingBookListHandler}\n      ></TrainingList>\n    </Container>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div``;\n","import { Container } from './Modal.styled';\n\nimport { createPortal } from 'react-dom';\nimport { IModalProps } from '../../interfaces';\nimport { useAppDispatch } from '../../redux/hooks';\nimport {\n  // getPlanningStatus,\n  deletePlanning,\n} from '../../redux/planning/planningSlice';\nimport { useNavigate } from 'react-router';\nconst modalRoot: Element | DocumentFragment =\n  document.querySelector('#modal-root')!;\n\nexport const Modal = ({ modalType, modalCloseHandler }: IModalProps) => {\n  const navigate = useNavigate();\n  // const planningStatus = useAppSelector(getPlanningStatus);\n  const dispatch = useAppDispatch();\n  switch (modalType) {\n    case 'success':\n      return createPortal(\n        <Container>\n          <p>Congratulations! You made it in time!</p>\n          <button\n            type=\"button\"\n            onClick={() => {\n              modalCloseHandler();\n              dispatch(deletePlanning());\n            }}\n          >\n            New training\n          </button>\n          <button\n            type=\"button\"\n            onClick={() => {\n              modalCloseHandler();\n              navigate('/');\n            }}\n          >\n            Back\n          </button>\n        </Container>,\n        modalRoot\n      );\n    case 'fail':\n      return createPortal(\n        <Container>\n          <p>\n            Well done! but you need to be a little bit faster. You can do it)\n          </p>\n\n          <button\n            type=\"button\"\n            onClick={() => {\n              modalCloseHandler();\n              dispatch(deletePlanning());\n            }}\n          >\n            New training\n          </button>\n          <button\n            type=\"button\"\n            onClick={() => {\n              modalCloseHandler();\n              navigate('/');\n            }}\n          >\n            Back\n          </button>\n        </Container>,\n        modalRoot\n      );\n    case 'book read':\n      return createPortal(\n        <Container>\n          <p>Congratulations! Another book read.</p>\n          <button\n            type=\"button\"\n            onClick={() => {\n              modalCloseHandler();\n            }}\n          >\n            Done\n          </button>\n        </Container>,\n        modalRoot\n      );\n  }\n};\n","import { Container } from './TrainingPage.styled';\nimport { useState, useEffect } from 'react';\nimport dayjs from 'dayjs';\nimport { MyTraining } from '../../components/MyTraining/MyTraining';\n\nimport { MyGoals } from '../../components/MyGoals/MyGoals';\nimport { MyTrainingResults } from '../../components/MyTrainingResults/MyTrainingResults';\nimport { MyTrainingRegistration } from '../../components/MyTrainingRegistration/MyTrainingRegistration';\nimport {\n  getPlanningStats,\n  getPlanningId,\n  getPlanningStatus,\n  getPlanningBooks,\n} from '../../redux/planning/planningSlice';\nimport { useAppSelector, useAppDispatch } from '../../redux/hooks';\nimport { getPlanningLoadingStatus } from '../../redux/planning/planningSlice';\n// import { LineChart } from '@mui/x-charts';\nimport { Modal } from '../../components/Modal/Modal';\n\nimport { processBooksData, arraySum } from '../../helpers';\nimport { IBookData } from '../../interfaces';\nimport { getCurrentBookNumber } from '../../helpers';\nimport { getSid } from '../../redux/auth/authSlice';\nimport { getPlanning } from '../../redux/planning/operations';\n\nconst TrainingPage = () => {\n  const stats = useAppSelector(getPlanningStats);\n  const status = useAppSelector(getPlanningLoadingStatus);\n  const planningId = useAppSelector(getPlanningId);\n  const planningStatus = useAppSelector(getPlanningStatus);\n  const books = useAppSelector(getPlanningBooks);\n\n  const sid = useAppSelector(getSid);\n\n  const initialState = [] as IBookData[];\n  const getCurrentDate = () => {\n    return dayjs().format('YYYY-MM-DD');\n  };\n\n  const [trainingBookList, setTrainingBookList] = useState(initialState);\n  const [startDate, setStartDate] = useState(getCurrentDate());\n  const [endDate, setEndDate] = useState('');\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [modalType, setModalType] = useState('');\n\n  console.log('planningStatus');\n  console.log(planningStatus);\n\n  const dispatch = useAppDispatch();\n  useEffect(() => {\n    if (sid) {\n      dispatch(getPlanning());\n      console.log('something');\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [sid]);\n\n  useEffect(() => {\n    switch (planningStatus) {\n      case 'none':\n        break;\n      case 'active':\n        break;\n      case 'success':\n        setModalType('success');\n        setIsModalOpen(true);\n        break;\n      case 'fail':\n        setModalType('fail');\n        setIsModalOpen(true);\n        break;\n      default:\n    }\n  }, [planningStatus]);\n\n  useEffect(() => {\n    if (planningStatus === 'active') {\n      const bookNumber = getCurrentBookNumber(books);\n      if (!bookNumber || bookNumber === 1) {\n        return;\n      }\n      setModalType('book read');\n      setIsModalOpen(true);\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [books]);\n\n  const updateTrainingBookList = (value: IBookData[]) => {\n    setTrainingBookList(value);\n  };\n\n  const updateStartDate = (value: string) => {\n    setStartDate(value);\n  };\n\n  const updateEndDate = (value: string) => {\n    setEndDate(value);\n  };\n\n  // useUnsavedChangesWarning(true);\n  console.log('STATS!');\n\n  if (status === 'fulfilled') {\n    console.log(\n      Object.values(processBooksData(Object.values(stats))).map(\n        (item, i, arr: any) => {\n          const result = (338 - arraySum(arr, i)) / (10 - i);\n          return result;\n        }\n      )\n    );\n  }\n\n  return (\n    <Container>\n      {(() => {\n        if (\n          planningStatus === 'active' ||\n          planningStatus === 'success' ||\n          planningStatus === 'fail'\n        ) {\n          return <MyTraining />;\n        }\n        if (planningStatus === 'none') {\n          return (\n            <MyTrainingRegistration\n              trainingBookList={trainingBookList}\n              startDate={startDate}\n              endDate={endDate}\n              updateTrainingBookList={updateTrainingBookList}\n              updateStartDate={updateStartDate}\n              updateEndDate={updateEndDate}\n            />\n          );\n        } else {\n          return <div>Loading...</div>;\n        }\n      })()}\n      {/* {\n        // (() => {\n        //   switch (planningStatus) {\n        //     case 'active' || 'success' || 'fail':\n        //       return <MyTraining />;\n\n        //     case 'none':\n        //       return (\n        //         <MyTrainingRegistration\n        //           trainingBookList={trainingBookList}\n        //           startDate={startDate}\n        //           endDate={endDate}\n        //           updateTrainingBookList={updateTrainingBookList}\n        //           updateStartDate={updateStartDate}\n        //           updateEndDate={updateEndDate}\n        //         />\n        //       );\n        //     default:\n        //       return <div>Loading...</div>;\n        //   }\n        // })()\n\n        planningStatus === 'active' ||\n        planningStatus === 'success' ||\n        planningStatus === 'fail' ? (\n          <MyTraining />\n        ) : null\n      } */}\n      {/* {planningStatus === 'none' ? (\n        <MyTrainingRegistration\n          trainingBookList={trainingBookList}\n          startDate={startDate}\n          endDate={endDate}\n          updateTrainingBookList={updateTrainingBookList}\n          updateStartDate={updateStartDate}\n          updateEndDate={updateEndDate}\n        />\n      ) : null} */}\n\n      <MyGoals\n        trainingBookList={trainingBookList}\n        planningStartDate={startDate}\n        planningEndDate={endDate}\n      ></MyGoals>\n      {planningId && <MyTrainingResults></MyTrainingResults>}\n\n      {/* {status === 'fulfilled' ? (\n        <LineChart\n          xAxis={[\n            {\n              data: Object.keys(processBooksData(Object.values(stats))).map(\n                (item, i) => i + 1\n              ),\n\n              min: 0,\n              max: 10,\n            },\n          ]}\n          series={[\n            {\n              data: Object.values(processBooksData(Object.values(stats))),\n              curve: 'natural',\n            },\n            {\n              data: Object.values(processBooksData(Object.values(stats))).map(\n                (item, i, arr) => {\n                  const result = (338 - arraySum(arr, i)) / (10 - i);\n                  return result;\n                }\n              ),\n              curve: 'natural',\n            },\n          ]}\n          width={500}\n          height={300}\n        />\n      ) : null} */}\n      {isModalOpen && (\n        <Modal\n          modalType={modalType}\n          modalCloseHandler={() => {\n            setIsModalOpen(false);\n          }}\n        />\n      )}\n    </Container>\n  );\n};\n\nexport default TrainingPage;\n"],"names":["Container","styled","TrainingListActive","planningBooks","useAppSelector","getPlanningBooks","TableContainer","component","Paper","Table","sx","minWidth","TableHead","TableRow","TableCell","align","TableBody","map","row","border","pagesTotal","pagesFinished","title","author","publishYear","_id","Timer","dispatch","useAppDispatch","endDate","getEndDate","useState","dayjs","diff","timeLeft","setTimeLeft","useEffect","intervalId","setInterval","finishPlanning","clearInterval","timeDifferenceProcessor","d","toString","padStart","h","m","s","MyTraining","MyGoals","trainingBookList","planningStartDate","planningEndDate","planning","getPlanningFromStore","console","log","startDate","getStartDate","planningId","getPlanningId","getCurrentBookNumber","books","className","length","MyTrainingResults","status","getPlanningLoadingStatus","stats","getPlanningStats","pagesLimit","setPagesLimit","currentBook","getCurrentBook","validationSchema","yup","pages","min","max","required","formik","useFormik","initialValues","onSubmit","values","updatePlanning","resetForm","statsToShow","statsArray","Object","filter","item","i","arr","statsHandler","handleSubmit","LocalizationProvider","dateAdapter","AdapterDayjs","DatePicker","label","defaultValue","disabled","TextField","id","variant","type","name","value","onChange","handleChange","helperText","touched","errors","time","pagesCount","nanoid","TrainingList","trainingList","removeFromTrainingListHandler","onClick","MyTrainingRegistration","updateTrainingBookList","updateStartDate","updateEndDate","setCurrentBook","goingToRead","getGoingToRead","currentlyReading","getCurrentlyReading","booksList","e","preventDefault","queryBody","createPlanning","format","newValue","disablePast","minDate","add","Autocomplete","event","book","disablePortal","isOptionEqualToValue","option","options","width","renderInput","params","bookData","find","addToTrainingBookListHandler","modalRoot","document","querySelector","Modal","modalType","modalCloseHandler","navigate","useNavigate","createPortal","deletePlanning","planningStatus","getPlanningStatus","sid","getSid","setTrainingBookList","setStartDate","setEndDate","isModalOpen","setIsModalOpen","setModalType","getPlanning","bookNumber","processBooksData","arraySum"],"sourceRoot":""}