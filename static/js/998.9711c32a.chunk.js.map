{"version":3,"file":"static/js/998.9711c32a.chunk.js","mappings":"wOAEaA,EAAYC,EAAAA,EAAAA,IAAH,sB,UCATD,EAAYC,EAAAA,EAAAA,IAAH,sB,uCCGTC,EAAY,SAAC,GAAiD,IAA/CC,EAA8C,EAA9CA,mBACpBC,EAASC,EAAAA,KAAaC,MAAM,CAChCC,MAAOF,EAAAA,KAEJG,QAAQ,kCAAmC,kBAC3CC,SAAS,0BACTC,OACHC,SAAUN,EAAAA,KAEPO,IAAI,EAAG,kCACPJ,QAAQ,qCAAsC,kBAC9CC,SAAS,4BAGRI,EAAa,mCAAG,WAAOC,GAAP,uFAIEV,EAAOW,QAAQD,GAJjB,gBAOZE,GADK,UACSF,GACpBX,EAAmBa,IARD,2CAAH,sDAYnB,OACE,UAAC,EAAD,YACE,SAAC,KAAD,CACEC,SAAUJ,EACVK,cAAe,CAAEX,MAAO,GAAII,SAAU,IACtCQ,iBAAkBf,EAHpB,UAKE,UAAC,KAAD,YACE,mBAAOgB,QAAQ,0BAAf,qBAEE,SAAC,KAAD,CACEC,KAAK,QACLC,KAAK,OACLC,GAAG,0BACHC,YAAY,oBAEd,2BACE,SAAC,KAAD,CAAcH,KAAK,gBAGvB,mBAAOD,QAAQ,6BAAf,wBAEE,SAAC,KAAD,CACEC,KAAK,WACLC,KAAK,WACLC,GAAG,6BACHC,YAAY,cAEd,2BACE,SAAC,KAAD,CAAcH,KAAK,mBAGvB,SAAC,KAAD,CAAMI,GAAG,gBAAT,uBACA,mBAAQH,KAAK,SAAb,yBAGJ,wCAGL,E,oBC/CD,EAhBkB,WAChB,IAAMI,GAAWC,EAAAA,EAAAA,KAEXxB,EAAkB,mCAAG,8FAASI,EAAT,EAASA,MAAOI,EAAhB,EAAgBA,SAAhB,SACnBe,GAASE,EAAAA,EAAAA,IAAO,CAAErB,MAAAA,EAAOI,SAAAA,KADN,OAEzBkB,QAAQC,IAAIJ,GAASE,EAAAA,EAAAA,IAAO,CAAErB,MAAAA,EAAOI,SAAAA,MAFZ,2CAAH,sDAKxB,OACE,UAACX,EAAD,wBAEE,SAACE,EAAD,CAAWC,mBAAoBA,MAGpC,C","sources":["pages/LoginPage/LoginPage.styled.tsx","components/LoginForm/LoginForm.styled.tsx","components/LoginForm/LoginForm.tsx","pages/LoginPage/LoginPage.tsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Container = styled.div``;\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div``;\n","import { Container } from './LoginForm.styled';\nimport { Link } from 'react-router-dom';\nimport { ILoginSubmitHandler } from '../../interfaces';\nimport { Formik, Field, Form as FormikForm, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\nexport const LoginForm = ({ loginSubmitHandler }: ILoginSubmitHandler) => {\n  const schema = yup.object().shape({\n    email: yup\n      .string()\n      .matches(/^[\\w.-]+@[\\w.-]+\\.[a-zA-Z]{2,}$/, 'Invalid format')\n      .required('This field is required')\n      .trim(),\n    password: yup\n      .string()\n      .min(8, 'Minimum input length 8 symbols')\n      .matches(/^(?=.*[A-Z])(?=.*[a-z])(?=.*\\d).+$/, 'Invalid format')\n      .required('This field is required'),\n  });\n\n  const submitHandler = async (values: {\n    email: string;\n    password: string;\n  }): Promise<void> => {\n    const isValid = await schema.isValid(values);\n\n    if (isValid) {\n      const result = { ...values };\n      loginSubmitHandler(result);\n    }\n  };\n\n  return (\n    <Container>\n      <Formik\n        onSubmit={submitHandler}\n        initialValues={{ email: '', password: '' }}\n        validationSchema={schema}\n      >\n        <FormikForm>\n          <label htmlFor=\"login-form__email-input\">\n            Email *\n            <Field\n              name=\"email\"\n              type=\"text\"\n              id=\"login-form__email-input\"\n              placeholder=\"your@email.com\"\n            />\n            <span>\n              <ErrorMessage name=\"email\" />\n            </span>\n          </label>\n          <label htmlFor=\"login-form__password-input\">\n            Password *\n            <Field\n              name=\"password\"\n              type=\"password\"\n              id=\"login-form__password-input\"\n              placeholder=\"Password\"\n            />\n            <span>\n              <ErrorMessage name=\"password\" />\n            </span>\n          </label>\n          <Link to=\"/registration\">Register</Link>\n          <button type=\"submit\">Login</button>\n        </FormikForm>\n      </Formik>\n      <p>LoginForm </p>\n    </Container>\n  );\n};\n","import { Container } from './LoginPage.styled';\nimport { LoginForm } from '../../components/LoginForm/LoginForm';\nimport { useAppDispatch } from '../../redux/hooks';\nimport { signIn } from '../../redux/auth/operations';\n\nimport { ISignInData } from '../../interfaces';\n\nconst LoginPage = () => {\n  const dispatch = useAppDispatch();\n\n  const loginSubmitHandler = async ({ email, password }: ISignInData) => {\n    await dispatch(signIn({ email, password }));\n    console.log(dispatch(signIn({ email, password })));\n  };\n\n  return (\n    <Container>\n      LoginPage\n      <LoginForm loginSubmitHandler={loginSubmitHandler}></LoginForm>\n    </Container>\n  );\n};\n\nexport default LoginPage;\n"],"names":["Container","styled","LoginForm","loginSubmitHandler","schema","yup","shape","email","matches","required","trim","password","min","submitHandler","values","isValid","result","onSubmit","initialValues","validationSchema","htmlFor","name","type","id","placeholder","to","dispatch","useAppDispatch","signIn","console","log"],"sourceRoot":""}