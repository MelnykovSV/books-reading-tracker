{"version":3,"file":"static/js/259.cfe3f13d.chunk.js","mappings":"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","sources":["pages/TrainingPage/TrainingPage.styled.tsx","components/MyTraining/MyTraining.styled.tsx","components/TrainingListActive/TrainingListActive.styled.tsx","components/TrainingListActive/TrainingListActive.tsx","components/Timer/Timer.styled.tsx","components/Timer/Timer.tsx","components/MyTraining/MyTraining.tsx","components/MyGoals/MyGoals.styled.tsx","components/MyGoals/MyGoals.tsx","components/MyTrainingResults/MyTrainingResults.styled.tsx","components/MyTrainingResults/MyTrainingResults.tsx","components/Modal/Modal.styled.tsx","components/MyTrainingRegistration/MyTrainingRegistration.styled.tsx","components/TrainingList/TrainingList.styled.tsx","components/Modal/Modal.tsx","pages/TrainingPage/TrainingPage.tsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Container = styled.div``;\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div``;\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div``;\n","import { Container } from './TrainingListActive.styled';\n\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Paper from '@mui/material/Paper';\n\nimport { useAppSelector } from '../../redux/hooks';\nimport { getPlanningBooks } from '../../redux/planning/planningSlice';\n\nexport const TrainingListActive = () => {\n  const planningBooks = useAppSelector(getPlanningBooks);\n\n  return (\n    <Container>\n      <TableContainer component={Paper}>\n        <Table sx={{ minWidth: 650 }} aria-label=\"simple table\">\n          <TableHead>\n            <TableRow>\n              <TableCell align=\"left\">Book title</TableCell>\n              <TableCell align=\"left\">Author</TableCell>\n              <TableCell align=\"left\">Year</TableCell>\n              <TableCell align=\"left\">Pages</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {planningBooks.map(row => (\n              <TableRow\n                key={row._id}\n                sx={{ '&:last-of-type td, &:last-of-type th': { border: 0 } }}\n              >\n                <TableCell align=\"left\">\n                  {row.pagesTotal === row.pagesFinished ? 'true' : 'false'}' '\n                  {row.title}\n                </TableCell>\n                <TableCell align=\"left\">{row.author}</TableCell>\n                <TableCell align=\"left\">{row.publishYear}</TableCell>\n                <TableCell align=\"left\">{row.pagesTotal}</TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </Container>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div``;\n","import { Container } from './Timer.styled';\nimport { useAppSelector } from '../../redux/hooks';\nimport { getStartDate, getEndDate } from '../../redux/planning/planningSlice';\nimport dayjs from 'dayjs';\n\nexport const Timer = () => {\n  const startDate = useAppSelector(getStartDate);\n  const endDate = useAppSelector(getEndDate);\n\n  return (\n    <Container>\n      <h2>{dayjs(endDate).diff(startDate, 'day')}</h2>\n    </Container>\n  );\n};\n","import { Container } from './MyTraining.styled';\nimport { TrainingListActive } from '../TrainingListActive/TrainingListActive';\nimport { Timer } from '../Timer/Timer';\n\nexport const MyTraining = () => {\n  return (\n    <Container>\n      <Timer></Timer>\n      <TrainingListActive></TrainingListActive>\n    </Container>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div``;\n","import { Container } from './MyGoals.styled';\nimport { useAppSelector } from '../../redux/hooks';\nimport {\n  getPlanningFromStore,\n  getStartDate,\n  getEndDate,\n  getPlanningId,\n} from '../../redux/planning/planningSlice';\nimport { IMyGoalsProps } from '../../interfaces';\nimport { getCurrentBookNumber } from '../../helpers';\n\nimport dayjs from 'dayjs';\n\nexport const MyGoals = ({\n  trainingBookList,\n  planningStartDate,\n  planningEndDate,\n}: IMyGoalsProps) => {\n  const planning = useAppSelector(getPlanningFromStore);\n  console.log(trainingBookList);\n\n  const startDate = useAppSelector(getStartDate);\n  const endDate = useAppSelector(getEndDate);\n  const planningId = useAppSelector(getPlanningId);\n\n  if (planningId) {\n    console.log('BOOKS COUNTER');\n    console.log(getCurrentBookNumber(planning.books));\n  }\n\n  return (\n    <Container>\n      <h2>My goals</h2>\n      <ul className=\"goals-body\">\n        <li className=\"goal\">\n          <p>{planningId ? planning.books.length : trainingBookList.length}</p>\n          <p>Amount of books</p>\n        </li>\n        <li className=\"goal\">\n          <p>\n            {planningId\n              ? dayjs(endDate).diff(dayjs(startDate), 'day')\n              : dayjs(planningEndDate).diff(planningStartDate, 'day') || 0}\n          </p>\n          <p>Amount of days</p>\n        </li>\n        {planningId && (\n          <li className=\"goal\">\n            <p>\n              {planning.books.length - getCurrentBookNumber(planning.books) + 1}\n            </p>\n            <p>Books left</p>\n          </li>\n        )}\n      </ul>\n    </Container>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div``;\n","import { useState, useEffect } from 'react';\nimport { Container } from './MyTrainingResults.styled';\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\nimport { LocalizationProvider } from '@mui/x-date-pickers';\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport dayjs from 'dayjs';\nimport { TextField } from '@mui/material';\nimport { getPlanningFromStore } from '../../redux/planning/planningSlice';\nimport { nanoid } from 'nanoid';\nimport { getPlanningLoadingStatus } from '../../redux/planning/planningSlice';\nimport { useAppSelector, useAppDispatch } from '../../redux/hooks';\nimport { getPlanningStats } from '../../redux/planning/planningSlice';\nimport { updatePlanning } from '../../redux/planning/operations';\n\nimport { getCurrentBook } from '../../helpers';\n\nimport { useFormik } from 'formik';\nimport { finishPlanning } from '../../redux/planning/planningSlice';\nimport * as yup from 'yup';\nimport { IPlanningStat } from '../../interfaces';\n\nexport const MyTrainingResults = () => {\n  const planning = useAppSelector(getPlanningFromStore);\n  const status = useAppSelector(getPlanningLoadingStatus);\n  const stats = useAppSelector(getPlanningStats);\n  const dispatch = useAppDispatch();\n\n  const [pagesLimit, setPagesLimit] = useState(0);\n  const currentBook = getCurrentBook(planning.books);\n\n  useEffect(() => {\n    if (status === 'fulfilled') {\n      if (currentBook) {\n        setPagesLimit(currentBook.pagesTotal - currentBook.pagesFinished);\n      } else {\n        setPagesLimit(0);\n        dispatch(finishPlanning('success'));\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentBook, status]);\n\n  const validationSchema = yup.object({\n    pages: yup\n      .number()\n      .min(1, 'Please enter a valid value')\n      .max(pagesLimit, `You have only ${pagesLimit} pages left in this book`)\n      .required('This field is required'),\n  });\n\n  const formik = useFormik({\n    initialValues: {\n      pages: 0,\n    },\n    validationSchema: validationSchema,\n    onSubmit: values => {\n      console.log(values);\n\n      dispatch(updatePlanning(values));\n      formik.resetForm();\n    },\n  });\n\n  const statsHandler = (stats: IPlanningStat[]) => {\n    const statsArray = [...Object.values(stats)];\n\n    if (statsArray.length <= 5) {\n      return statsArray;\n    }\n\n    return statsArray.filter((item, i, arr) => i + 1 > arr.length - 5);\n  };\n\n  const statsToShow = statsHandler(stats);\n\n  return (\n    <Container>\n      <form onSubmit={formik.handleSubmit}>\n        <LocalizationProvider dateAdapter={AdapterDayjs}>\n          <DatePicker label=\"Date\" defaultValue={dayjs()} disabled />\n        </LocalizationProvider>\n\n        <TextField\n          id=\"outlined-basic\"\n          label=\"Amount of pages\"\n          variant=\"outlined\"\n          type=\"number\"\n          name=\"pages\"\n          value={formik.values.pages}\n          onChange={formik.handleChange}\n          helperText={formik.touched.pages && formik.errors.pages}\n        />\n\n        <button type=\"submit\">Add result</button>\n      </form>\n\n      <div className=\"results-container\">\n        <h3>Statistics</h3>\n        {status === 'fulfilled'\n          ? statsToShow.map(item => (\n              <li key={nanoid()}>\n                <p>{item.time}</p>\n                <p>{item.pagesCount}</p>\n              </li>\n            ))\n          : null}\n      </div>\n    </Container>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div``;\n","import styled from '@emotion/styled';\nimport { IStyledProps } from '../../interfaces';\n\nexport const Container = styled.form<IStyledProps>``;\n","import styled from '@emotion/styled';\nimport { IStyledProps } from '../../interfaces';\n\nexport const Container = styled.div<IStyledProps>``;\n","import { Container } from './Modal.styled';\n\nimport { createPortal } from 'react-dom';\nimport { IModalProps } from '../../interfaces';\nimport { useAppDispatch } from '../../redux/hooks';\nimport {\n  // getPlanningStatus,\n  deletePlanning,\n} from '../../redux/planning/planningSlice';\nimport { useNavigate } from 'react-router';\nconst modalRoot: Element | DocumentFragment =\n  document.querySelector('#modal-root')!;\n\nexport const Modal = ({ modalType, modalCloseHandler }: IModalProps) => {\n  const navigate = useNavigate();\n  // const planningStatus = useAppSelector(getPlanningStatus);\n  const dispatch = useAppDispatch();\n  switch (modalType) {\n    case 'success':\n      return createPortal(\n        <Container>\n          <p>Congratulations! You made it in time!</p>\n          <button\n            type=\"button\"\n            onClick={() => {\n              modalCloseHandler();\n              dispatch(deletePlanning());\n            }}\n          >\n            New training\n          </button>\n          <button\n            type=\"button\"\n            onClick={() => {\n              modalCloseHandler();\n              navigate('/');\n            }}\n          >\n            Back\n          </button>\n        </Container>,\n        modalRoot\n      );\n    case 'fail':\n      return createPortal(\n        <Container>\n          <p>\n            Well done! but you need to be a little bit faster. You can do it)\n          </p>\n\n          <button\n            type=\"button\"\n            onClick={() => {\n              modalCloseHandler();\n              dispatch(deletePlanning());\n            }}\n          >\n            New training\n          </button>\n          <button\n            type=\"button\"\n            onClick={() => {\n              modalCloseHandler();\n              navigate('/');\n            }}\n          >\n            Back\n          </button>\n        </Container>,\n        modalRoot\n      );\n    case 'book read':\n      return createPortal(\n        <Container>\n          <p>Congratulations! Another book read.</p>\n          <button\n            type=\"button\"\n            onClick={() => {\n              modalCloseHandler();\n            }}\n          >\n            Done\n          </button>\n        </Container>,\n        modalRoot\n      );\n  }\n};\n","import { Container } from './TrainingPage.styled';\nimport { useState, useEffect } from 'react';\nimport dayjs from 'dayjs';\nimport { MyTraining } from '../../components/MyTraining/MyTraining';\n\nimport { MyGoals } from '../../components/MyGoals/MyGoals';\nimport { MyTrainingResults } from '../../components/MyTrainingResults/MyTrainingResults';\nimport { MyTrainingRegistration } from '../../components/MyTrainingRegistration/MyTrainingRegistration';\nimport {\n  getPlanningStats,\n  getPlanningId,\n  getPlanningStatus,\n  getPlanningBooks,\n} from '../../redux/planning/planningSlice';\nimport { useAppSelector } from '../../redux/hooks';\nimport { getPlanningLoadingStatus } from '../../redux/planning/planningSlice';\n// import { LineChart } from '@mui/x-charts';\nimport { Modal } from '../../components/Modal/Modal';\n\nimport { processBooksData, arraySum } from '../../helpers';\nimport { IBookData } from '../../interfaces';\nimport { getCurrentBookNumber } from '../../helpers';\n\nconst TrainingPage = () => {\n  const stats = useAppSelector(getPlanningStats);\n  const status = useAppSelector(getPlanningLoadingStatus);\n  const planningId = useAppSelector(getPlanningId);\n  const planningStatus = useAppSelector(getPlanningStatus);\n  const books = useAppSelector(getPlanningBooks);\n\n  const initialState = [] as IBookData[];\n  const getCurrentDate = () => {\n    return dayjs().format('YYYY-MM-DD');\n  };\n\n  const [trainingBookList, setTrainingBookList] = useState(initialState);\n  const [startDate, setStartDate] = useState(getCurrentDate());\n  const [endDate, setEndDate] = useState('');\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [modalType, setModalType] = useState('');\n\n  useEffect(() => {\n    switch (planningStatus) {\n      case 'none':\n        break;\n      case 'active':\n        break;\n      case 'success':\n        setModalType('success');\n        setIsModalOpen(true);\n        break;\n      case 'fail':\n        setModalType('fail');\n        setIsModalOpen(true);\n        break;\n      default:\n    }\n  }, [planningStatus]);\n\n  useEffect(() => {\n    if (planningStatus === 'active') {\n      const bookNumber = getCurrentBookNumber(books);\n      if (!bookNumber || bookNumber === 1) {\n        return;\n      }\n      setModalType('book read');\n      setIsModalOpen(true);\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [books]);\n\n  const updateTrainingBookList = (value: IBookData[]) => {\n    setTrainingBookList(value);\n  };\n\n  const updateStartDate = (value: string) => {\n    setStartDate(value);\n  };\n\n  const updateEndDate = (value: string) => {\n    setEndDate(value);\n  };\n\n  console.log('STATS!');\n\n  if (status === 'fulfilled') {\n    console.log(\n      Object.values(processBooksData(Object.values(stats))).map(\n        (item, i, arr: any) => {\n          const result = (338 - arraySum(arr, i)) / (10 - i);\n          return result;\n        }\n      )\n    );\n  }\n\n  return (\n    <Container>\n      {planningStatus === 'active' || 'success' || 'fail' ? (\n        <MyTraining />\n      ) : (\n        <MyTrainingRegistration\n          trainingBookList={trainingBookList}\n          startDate={startDate}\n          endDate={endDate}\n          updateTrainingBookList={updateTrainingBookList}\n          updateStartDate={updateStartDate}\n          updateEndDate={updateEndDate}\n        />\n      )}\n\n      <MyGoals\n        trainingBookList={trainingBookList}\n        planningStartDate={startDate}\n        planningEndDate={endDate}\n      ></MyGoals>\n      {planningId && <MyTrainingResults></MyTrainingResults>}\n\n      {/* {status === 'fulfilled' ? (\n        <LineChart\n          xAxis={[\n            {\n              data: Object.keys(processBooksData(Object.values(stats))).map(\n                (item, i) => i + 1\n              ),\n\n              min: 0,\n              max: 10,\n            },\n          ]}\n          series={[\n            {\n              data: Object.values(processBooksData(Object.values(stats))),\n              curve: 'natural',\n            },\n            {\n              data: Object.values(processBooksData(Object.values(stats))).map(\n                (item, i, arr) => {\n                  const result = (338 - arraySum(arr, i)) / (10 - i);\n                  return result;\n                }\n              ),\n              curve: 'natural',\n            },\n          ]}\n          width={500}\n          height={300}\n        />\n      ) : null} */}\n      {isModalOpen && (\n        <Modal\n          modalType={modalType}\n          modalCloseHandler={() => {\n            setIsModalOpen(false);\n          }}\n        />\n      )}\n    </Container>\n  );\n};\n\nexport default TrainingPage;\n"],"names":["Container","styled","TrainingListActive","planningBooks","useAppSelector","getPlanningBooks","component","Paper","sx","minWidth","align","map","row","border","pagesTotal","pagesFinished","title","author","publishYear","_id","Timer","startDate","getStartDate","endDate","getEndDate","dayjs","diff","MyTraining","MyGoals","trainingBookList","planningStartDate","planningEndDate","planning","getPlanningFromStore","console","log","planningId","getPlanningId","getCurrentBookNumber","books","className","length","MyTrainingResults","status","getPlanningLoadingStatus","stats","getPlanningStats","dispatch","useAppDispatch","useState","pagesLimit","setPagesLimit","currentBook","getCurrentBook","useEffect","finishPlanning","validationSchema","yup","pages","min","max","required","formik","useFormik","initialValues","onSubmit","values","updatePlanning","resetForm","statsToShow","statsArray","Object","filter","item","i","arr","statsHandler","handleSubmit","dateAdapter","AdapterDayjs","label","defaultValue","disabled","id","variant","type","name","value","onChange","handleChange","helperText","touched","errors","time","pagesCount","nanoid","modalRoot","document","querySelector","Modal","modalType","modalCloseHandler","navigate","useNavigate","createPortal","onClick","deletePlanning","planningStatus","getPlanningStatus","format","isModalOpen","setIsModalOpen","setModalType","bookNumber","processBooksData","arraySum"],"sourceRoot":""}