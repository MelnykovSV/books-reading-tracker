{"version":3,"file":"static/js/940.3ca45438.chunk.js","mappings":"2MAEaA,EAAYC,EAAAA,EAAAA,IAAH,sB,uCCATD,EAAYC,EAAAA,EAAAA,IAAH,sB,uCCGTC,EAAmB,SAAC,GAEE,IADjCC,EACgC,EADhCA,0BAEMC,EAASC,EAAAA,KAAaC,MAAM,CAChCC,KAAMF,EAAAA,KAEHG,IAAI,EAAG,kCACPC,QAAQ,iBAAkB,kBAC1BC,SAAS,0BACTC,OACHC,MAAOP,EAAAA,KAEJI,QAAQ,kCAAmC,kBAC3CC,SAAS,0BACTC,OACHE,SAAUR,EAAAA,KAEPG,IAAI,EAAG,kCACPC,QAAQ,qCAAsC,kBAC9CC,SAAS,4BAGRI,EAAa,mCAAG,WAAOC,GAAP,uFAKEX,EAAOY,QAAQD,GALjB,gBAQZE,GADK,UACSF,GACpBZ,EAA0Bc,IATR,2CAAH,sDAanB,OACE,SAAC,EAAD,WACE,SAAC,KAAD,CACEC,SAAUJ,EACVK,cAAe,CAAEZ,KAAM,GAAIK,MAAO,GAAIC,SAAU,IAFlD,UAIE,UAAC,KAAD,YACE,8CACA,mBAAOO,QAAQ,gCAAf,mBAEE,SAAC,KAAD,CACEb,KAAK,OACLc,KAAK,OACLC,GAAG,gCACHC,YAAY,SAEd,2BACE,SAAC,KAAD,CAAchB,KAAK,eAGvB,mBAAOa,QAAQ,iCAAf,oBAEE,SAAC,KAAD,CACEb,KAAK,QACLc,KAAK,OACLC,GAAG,iCACHC,YAAY,oBAEd,2BACE,SAAC,KAAD,CAAchB,KAAK,gBAGvB,mBAAOa,QAAQ,oCAAf,uBAEE,SAAC,KAAD,CACEb,KAAK,WACLc,KAAK,WACLC,GAAG,oCACHC,YAAY,SAEd,2BACE,SAAC,KAAD,CAAchB,KAAK,mBAGvB,sDAC2B,SAAC,KAAD,CAAMiB,GAAG,SAAT,wBAE3B,mBAAQH,KAAK,SAAb,4BAKT,E,oBChED,EArByB,WACvB,IAAMI,GAAWC,EAAAA,EAAAA,KAUjB,OACE,UAAC1B,EAAD,+BAEE,SAACE,EAAD,CACEC,0BAZ4B,SAAC,GAIf,IAHlBI,EAGiB,EAHjBA,KACAK,EAEiB,EAFjBA,MACAC,EACiB,EADjBA,SAEAY,GAASE,EAAAA,EAAAA,IAAO,CAAEpB,KAAAA,EAAMK,MAAAA,EAAOC,SAAAA,IAChC,MAUF,C","sources":["pages/RegistrationPage/RegistrationPage.styled.tsx","components/RegistrationForm/RegistrationFrom.styled.tsx","components/RegistrationForm/RegistrationForm.tsx","pages/RegistrationPage/RegistrationPage.tsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Container = styled.div``;\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div``;\n","import { Container } from './RegistrationFrom.styled';\nimport { Link } from 'react-router-dom';\nimport * as yup from 'yup';\nimport { Formik, Field, Form as FormikForm, ErrorMessage } from 'formik';\nimport { IRegistrationSubmitHandler } from '../../interfaces';\nexport const RegistrationForm = ({\n  registrationSubmitHandler,\n}: IRegistrationSubmitHandler) => {\n  const schema = yup.object().shape({\n    name: yup\n      .string()\n      .min(3, 'Minimum input length 3 symbols')\n      .matches(/^[a-zA-Z0-9]+$/, 'Invalid format')\n      .required('This field is required')\n      .trim(),\n    email: yup\n      .string()\n      .matches(/^[\\w.-]+@[\\w.-]+\\.[a-zA-Z]{2,}$/, 'Invalid format')\n      .required('This field is required')\n      .trim(),\n    password: yup\n      .string()\n      .min(8, 'Minimum input length 8 symbols')\n      .matches(/^(?=.*[A-Z])(?=.*[a-z])(?=.*\\d).+$/, 'Invalid format')\n      .required('This field is required'),\n  });\n\n  const submitHandler = async (values: {\n    name: string;\n    email: string;\n    password: string;\n  }): Promise<void> => {\n    const isValid = await schema.isValid(values);\n\n    if (isValid) {\n      const result = { ...values };\n      registrationSubmitHandler(result);\n    }\n  };\n\n  return (\n    <Container>\n      <Formik\n        onSubmit={submitHandler}\n        initialValues={{ name: '', email: '', password: '' }}\n      >\n        <FormikForm>\n          <h2>RegistrationForm</h2>\n          <label htmlFor=\"registration-form__name-input\">\n            Name:\n            <Field\n              name=\"name\"\n              type=\"text\"\n              id=\"registration-form__name-input\"\n              placeholder=\"...\"\n            />\n            <span>\n              <ErrorMessage name=\"name\" />\n            </span>\n          </label>\n          <label htmlFor=\"registration-form__email-input\">\n            Email:\n            <Field\n              name=\"email\"\n              type=\"text\"\n              id=\"registration-form__email-input\"\n              placeholder=\"your@email.com\"\n            />\n            <span>\n              <ErrorMessage name=\"email\" />\n            </span>\n          </label>\n          <label htmlFor=\"registration-form__password-input\">\n            Password:\n            <Field\n              name=\"password\"\n              type=\"password\"\n              id=\"registration-form__password-input\"\n              placeholder=\"...\"\n            />\n            <span>\n              <ErrorMessage name=\"password\" />\n            </span>\n          </label>\n          <p>\n            Already have an account? <Link to=\"/login\">Log in</Link>\n          </p>\n          <button type=\"submit\">Register</button>\n        </FormikForm>\n      </Formik>\n    </Container>\n  );\n};\n","import { Container } from './RegistrationPage.styled';\nimport { RegistrationForm } from '../../components/RegistrationForm/RegistrationForm';\nimport { useAppDispatch } from '../../redux/hooks';\nimport { signUp } from '../../redux/auth/operations';\n\nimport { ISignUpData } from '../../interfaces';\n\nconst RegistrationPage = () => {\n  const dispatch = useAppDispatch();\n\n  const registrationSubmitHandler = ({\n    name,\n    email,\n    password,\n  }: ISignUpData) => {\n    dispatch(signUp({ name, email, password }));\n  };\n\n  return (\n    <Container>\n      RegistrationPage\n      <RegistrationForm\n        registrationSubmitHandler={registrationSubmitHandler}\n      ></RegistrationForm>\n    </Container>\n  );\n};\n\nexport default RegistrationPage;\n"],"names":["Container","styled","RegistrationForm","registrationSubmitHandler","schema","yup","shape","name","min","matches","required","trim","email","password","submitHandler","values","isValid","result","onSubmit","initialValues","htmlFor","type","id","placeholder","to","dispatch","useAppDispatch","signUp"],"sourceRoot":""}