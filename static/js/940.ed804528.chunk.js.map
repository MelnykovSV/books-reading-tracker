{"version":3,"file":"static/js/940.ed804528.chunk.js","mappings":"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","sources":["pages/RegistrationPage/RegistrationPage.styled.tsx","components/RegistrationForm/RegistrationFrom.styled.tsx","components/RegistrationForm/RegistrationForm.tsx","pages/RegistrationPage/RegistrationPage.tsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport bgTablet from '../../images/form-bg.jpg';\nimport bgTablet2x from '../../images/form-bg@2x.jpg';\nimport bgDesktop from '../../images/form-bg.jpg';\nimport bgDesktop2x from '../../images/form-bg@2x.jpg';\nimport { IStyledProps } from '../../interfaces';\n\nexport const Container = styled.div<IStyledProps>`\n  display: flex;\n  flex-direction: column;\n\n  @media screen and (min-width: ${props => props.theme.sizes.desktop}) {\n    flex-direction: row;\n  }\n  .form-container {\n    width: 100%;\n\n    @media screen and (min-width: ${props => props.theme.sizes.tablet}) {\n      background: linear-gradient(\n          to right,\n          ${props => props.theme.colors.transparent.formBg},\n          ${props => props.theme.colors.transparent.formBg}\n        ),\n        url(${bgTablet});\n\n      @media (min-device-pixel-ratio: 2),\n        (min-resolution: 192dpi),\n        (min-resolution: 2dppx) {\n        background: linear-gradient(\n            to right,\n            ${props => props.theme.colors.transparent.formBg},\n            ${props => props.theme.colors.transparent.formBg}\n          ),\n          url(${bgTablet2x});\n      }\n    }\n    @media screen and (min-width: 1280px) {\n      width: 549px;\n      background: linear-gradient(\n          to right,\n          ${props => props.theme.colors.transparent.formBg},\n          ${props => props.theme.colors.transparent.formBg}\n        ),\n        url(${bgDesktop});\n\n      @media (min-device-pixel-ratio: 2),\n        (min-resolution: 192dpi),\n        (min-resolution: 2dppx) {\n        background: linear-gradient(\n            to right,\n            ${props => props.theme.colors.transparent.formBg},\n            ${props => props.theme.colors.transparent.formBg}\n          ),\n          url(${bgDesktop2x});\n      }\n    }\n  }\n  .text-container {\n    padding-top: 32px;\n    width: 100%;\n    max-width: 450px;\n    margin: 0 auto;\n    display: none;\n\n    @media screen and (min-width: ${props => props.theme.sizes.tablet}) {\n      display: block;\n    }\n\n    @media screen and (min-width: ${props => props.theme.sizes.desktop}) {\n      padding-top: 0;\n      width: 450px;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n    }\n\n    h2 {\n      font-family: 'Abril Fatface';\n      font-style: normal;\n      font-weight: 400;\n      font-size: 34px;\n      line-height: calc(38 / 34);\n      color: ${props => props.theme.colors.text.primary};\n      margin-bottom: 32px;\n      text-align: center;\n    }\n    b {\n      font-family: 'Montserrat';\n      font-style: normal;\n      font-weight: 500;\n      font-size: 20px;\n      line-height: calc(38 / 20);\n      color: ${props => props.theme.colors.text.primary};\n      margin-bottom: 14px;\n    }\n\n    ul {\n      padding-left: 20px;\n      font-family: 'Montserrat';\n      font-style: normal;\n      font-weight: 500;\n      font-size: 14px;\n      line-height: calc(17 / 14);\n\n      color: ${props => props.theme.colors.text.secondaryDark};\n      margin-bottom: 24px;\n      li {\n        margin-bottom: 12px;\n      }\n    }\n  }\n`;\n","import styled from '@emotion/styled';\nimport bg from '../../images/form-bg.jpg';\nimport bg2x from '../../images/form-bg@2x.jpg';\n\ntype ITheme = {\n  colors: {\n    text: {\n      primary: string;\n      primaryDark: string;\n      secondary: string;\n      secondaryDark: string;\n      placeholder: string;\n      google: string;\n    };\n    bg: {\n      primary: string;\n      secondary: string;\n      decoration: string;\n      title: string;\n      accent: string;\n      accentDark: string;\n      accentSecondary: string;\n    };\n    transparent: {\n      overlay: string;\n      scroll: string;\n      formBg: string;\n      decoration: string;\n    };\n  };\n  animation: {\n    time: string;\n    cubic: string;\n  };\n  sizes: {\n    tablet: string;\n    desktop: string;\n  };\n};\n\nexport const Container = styled.div<ITheme>`\n  @media screen and (min-width: ${props => props.theme.sizes.tablet}) {\n    display: flex;\n    align-items: center;\n    padding-top: 64px;\n    padding-bottom: 64px;\n  }\n\n  @media screen and (min-width: ${props => props.theme.sizes.desktop}) {\n    min-height: 790px;\n  }\n  form {\n    margin: 0 auto;\n    display: block;\n    width: min(100%, 320px);\n    padding: 32px 20px;\n    background: linear-gradient(\n        to right,\n        ${props => props.theme.colors.transparent.formBg},\n        ${props => props.theme.colors.transparent.formBg}\n      ),\n      url(${bg});\n\n    @media (min-device-pixel-ratio: 2),\n      (min-resolution: 192dpi),\n      (min-resolution: 2dppx) {\n      background: linear-gradient(\n          to right,\n          ${props => props.theme.colors.transparent.formBg},\n          ${props => props.theme.colors.transparent.formBg}\n        ),\n        url(${bg2x});\n    }\n\n    @media screen and (min-width: ${props => props.theme.sizes.tablet}) {\n      width: 400px;\n      background: none;\n      background-color: ${props => props.theme.colors.bg.primary};\n    }\n\n    .google-button {\n      cursor: pointer;\n      display: block;\n      width: 150px;\n      padding: 11px 14px;\n      display: flex;\n      gap: 16px;\n      align-items: center;\n      background-color: ${props => props.theme.colors.bg.primary};\n      border: none;\n      margin: 0 auto;\n      margin-bottom: 28px;\n\n      @media screen and (min-width: ${props => props.theme.sizes.tablet}) {\n        background: ${props => props.theme.colors.bg.secondary};\n        box-shadow: 0px 2px 2px rgba(9, 30, 63, 0.15);\n      }\n    }\n\n    label {\n      display: block;\n      width: 100%;\n      margin-bottom: 20px;\n      color: ${props => props.theme.colors.bg.primary};\n      @media screen and (min-width: ${props => props.theme.sizes.tablet}) {\n        color: ${props => props.theme.colors.text.secondaryDark};\n      }\n      input {\n        display: block;\n        width: 100%;\n        margin-bottom: 8px;\n        font-weight: 400;\n        padding: 13px 8px;\n\n        @media screen and (min-width: ${props => props.theme.sizes.tablet}) {\n          background: ${props => props.theme.colors.bg.secondary};\n          box-shadow: inset 0px 1px 2px rgba(29, 29, 27, 0.15);\n          border: none;\n        }\n      }\n      .registration-form__input-label {\n        display: block;\n        margin-bottom: 8px;\n        span {\n          color: ${props => props.theme.colors.bg.accentDark};\n        }\n      }\n      .registration-form__error-message-container {\n        display: block;\n        color: ${props => props.theme.colors.bg.accentDark};\n      }\n    }\n    .registration-form__submit-button {\n      cursor: pointer;\n      display: block;\n      font-weight: 600;\n      font-size: 16px;\n      line-height: calc(20 / 16);\n      text-align: center;\n      color: ${props => props.theme.colors.bg.primary};\n      background-color: ${props => props.theme.colors.bg.accent};\n      border: none;\n      width: 100%;\n      height: 60px;\n      margin-bottom: 20px;\n    }\n\n    .registration-form__redirrect {\n      font-weight: 500;\n      font-size: 13px;\n      line-height: calc(16 / 13);\n      text-align: center;\n      color: ${props => props.theme.colors.text.secondaryDark};\n\n      a {\n        color: ${props => props.theme.colors.bg.accent};\n      }\n    }\n  }\n`;\n","import { Container } from './RegistrationFrom.styled';\nimport { Link } from 'react-router-dom';\nimport * as yup from 'yup';\nimport { Formik, Field, Form as FormikForm, ErrorMessage } from 'formik';\nimport { IRegistrationSubmitHandler } from '../../interfaces';\nimport { ReactComponent as GoogleIcon } from '../../images/icons/google.svg';\nexport const RegistrationForm = ({\n  registrationSubmitHandler,\n}: IRegistrationSubmitHandler) => {\n  const schema = yup.object().shape({\n    name: yup\n      .string()\n      .min(3, 'Minimum input length 3 symbols')\n      .matches(/^[a-zA-Z0-9]+$/, 'Invalid format')\n      .required('This field is required')\n      .trim(),\n    email: yup\n      .string()\n      .matches(/^[\\w.-]+@[\\w.-]+\\.[a-zA-Z]{2,}$/, 'Invalid format')\n      .required('This field is required')\n      .trim(),\n    password: yup\n      .string()\n      .min(8, 'Minimum input length 8 symbols')\n      .matches(/^(?=.*[A-Z])(?=.*[a-z])(?=.*\\d).+$/, 'Invalid format')\n      .required('This field is required'),\n  });\n\n  const submitHandler = async (values: {\n    name: string;\n    email: string;\n    password: string;\n  }): Promise<void> => {\n    const isValid = await schema.isValid(values);\n\n    if (isValid) {\n      const result = { ...values };\n      registrationSubmitHandler(result);\n    }\n  };\n\n  return (\n    <Container>\n      <Formik\n        onSubmit={submitHandler}\n        initialValues={{ name: '', email: '', password: '' }}\n        validationSchema={schema}\n      >\n        <FormikForm>\n          <button type=\"button\" className=\"google-button\">\n            <span className=\"google-button__icon-container\">\n              <GoogleIcon className=\"google-button__icon\" />\n            </span>\n            <span className=\"google-button__text\">Google</span>\n          </button>\n          <label htmlFor=\"registration-form__name-input\">\n            <span className=\"registration-form__input-label\">\n              Name <span>*</span>\n            </span>\n\n            <Field\n              name=\"name\"\n              type=\"text\"\n              id=\"registration-form__name-input\"\n              placeholder=\"...\"\n            />\n            <span className=\"registration-form__error-message-container\">\n              <ErrorMessage name=\"name\" />\n            </span>\n          </label>\n          <label htmlFor=\"registration-form__email-input\">\n            <span className=\"registration-form__input-label\">\n              {' '}\n              Email <span>*</span>\n            </span>\n\n            <Field\n              name=\"email\"\n              type=\"text\"\n              id=\"registration-form__email-input\"\n              placeholder=\"your@email.com\"\n            />\n            <span className=\"registration-form__error-message-container\">\n              <ErrorMessage name=\"email\" />\n            </span>\n          </label>\n          <label htmlFor=\"registration-form__password-input\">\n            <span className=\"registration-form__input-label\">\n              Password <span>*</span>\n            </span>\n\n            <Field\n              name=\"password\"\n              type=\"password\"\n              id=\"registration-form__password-input\"\n              placeholder=\"...\"\n            />\n            <span className=\"registration-form__error-message-container\">\n              <ErrorMessage name=\"password\" />\n            </span>\n          </label>\n\n          {/* <label htmlFor=\"registration-form__password-confirm-input\">\n            <span className=\"registration-form__input-label\">\n              Password <span>*</span>\n            </span>\n\n            <Field\n              name=\"password-confirm\"\n              type=\"password-confirm\"\n              id=\"registration-form__password-confirm-input\"\n              placeholder=\"...\"\n            />\n            <span className=\"registration-form__error-message-container\">\n              <ErrorMessage name=\"password-confirm\" />\n            </span>\n          </label> */}\n\n          <button className=\"registration-form__submit-button\" type=\"submit\">\n            Register\n          </button>\n          <p className=\"registration-form__redirrect\">\n            Already have an account? <Link to=\"/login\">Log in</Link>\n          </p>\n        </FormikForm>\n      </Formik>\n    </Container>\n  );\n};\n","import { Container } from './RegistrationPage.styled';\nimport { RegistrationForm } from '../../components/RegistrationForm/RegistrationForm';\nimport { useAppDispatch } from '../../redux/hooks';\nimport { signUp } from '../../redux/auth/operations';\n\nimport { ISignUpData } from '../../interfaces';\n\nconst RegistrationPage = () => {\n  const dispatch = useAppDispatch();\n\n  const registrationSubmitHandler = ({\n    name,\n    email,\n    password,\n  }: ISignUpData) => {\n    dispatch(signUp({ name, email, password }));\n  };\n\n  return (\n    <Container className=\"container\">\n      <div className=\"form-container\">\n        <RegistrationForm\n          registrationSubmitHandler={registrationSubmitHandler}\n        ></RegistrationForm>\n      </div>\n\n      <div className=\"text-container\">\n        <div className=\"text\">\n          <h2>Books Reading</h2>\n          <b>Will help you to</b>\n          <ul>\n            <li>Create your goal faster and proceed to read</li>\n            <li>Divide process proportionally for each day</li>\n            <li>Track your success</li>\n          </ul>\n\n          <b>Will help you to</b>\n          <ul>\n            <li>Pose your own independent point of view</li>\n            <li>Improve your professional skills according to new knowledge</li>\n            <li>Become an interesting interlocutor</li>\n          </ul>\n        </div>\n      </div>\n    </Container>\n  );\n};\n\nexport default RegistrationPage;\n"],"names":["Container","styled","props","theme","sizes","desktop","tablet","colors","transparent","formBg","bgTablet","bgTablet2x","bgDesktop","bgDesktop2x","text","primary","secondaryDark","bg","bg2x","secondary","accentDark","accent","RegistrationForm","registrationSubmitHandler","schema","yup","shape","name","min","matches","required","trim","email","password","submitHandler","values","isValid","result","onSubmit","initialValues","validationSchema","type","className","htmlFor","id","placeholder","to","dispatch","useAppDispatch","signUp"],"sourceRoot":""}