{"version":3,"file":"static/js/259.6947c452.chunk.js","mappings":"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","sources":["pages/TrainingPage/TrainingPage.styled.tsx","components/MyTraining/MyTraining.styled.tsx","components/TrainingListActive/TrainingListActive.styled.tsx","components/TrainingListActive/TrainingListActive.tsx","components/Timer/Timer.styled.tsx","components/Timer/Timer.tsx","components/MyTraining/MyTraining.tsx","components/MyGoals/MyGoals.styled.tsx","components/MyGoals/MyGoals.tsx","components/MyTrainingResults/MyTrainingResults.styled.tsx","components/MyTrainingResults/MyTrainingResults.tsx","components/MyTrainingRegistration/MyTrainingRegistration.styled.tsx","components/TrainingList/TrainingList.styled.tsx","components/TrainingList/TrainingList.tsx","components/MyTrainingRegistration/MyTrainingRegistration.tsx","components/Modal/Modal.styled.tsx","components/Modal/Modal.tsx","pages/TrainingPage/TrainingPage.tsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Container = styled.div``;\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div``;\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div``;\n","import { Container } from './TrainingListActive.styled';\n\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Paper from '@mui/material/Paper';\n\nimport { useAppSelector } from '../../redux/hooks';\nimport { getPlanningBooks } from '../../redux/planning/planningSlice';\n\nexport const TrainingListActive = () => {\n  const planningBooks = useAppSelector(getPlanningBooks);\n\n  return (\n    <Container>\n      <TableContainer component={Paper}>\n        <Table sx={{ minWidth: 650 }} aria-label=\"simple table\">\n          <TableHead>\n            <TableRow>\n              <TableCell align=\"left\">Book title</TableCell>\n              <TableCell align=\"left\">Author</TableCell>\n              <TableCell align=\"left\">Year</TableCell>\n              <TableCell align=\"left\">Pages</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {planningBooks.map(row => (\n              <TableRow\n                key={row._id}\n                sx={{ '&:last-of-type td, &:last-of-type th': { border: 0 } }}\n              >\n                <TableCell align=\"left\">\n                  {row.pagesTotal === row.pagesFinished ? 'true' : 'false'}' '\n                  {row.title}\n                </TableCell>\n                <TableCell align=\"left\">{row.author}</TableCell>\n                <TableCell align=\"left\">{row.publishYear}</TableCell>\n                <TableCell align=\"left\">{row.pagesTotal}</TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </Container>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div``;\n","import { Container } from './Timer.styled';\nimport { useState, useEffect } from 'react';\nimport { useAppSelector } from '../../redux/hooks';\nimport { getEndDate } from '../../redux/planning/planningSlice';\nimport dayjs from 'dayjs';\nimport { useAppDispatch } from '../../redux/hooks';\nimport { finishPlanning } from '../../redux/planning/planningSlice';\nimport { timeDifferenceProcessor } from '../../helpers';\n\nexport const Timer = () => {\n  const dispatch = useAppDispatch();\n\n  const endDate = useAppSelector(getEndDate);\n\n  //to test how timer ends\n  // const endDate = Date.now() + 20000;\n\n  const [timeLeft, setTimeLeft] = useState(dayjs(endDate).diff(dayjs()));\n\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      if (dayjs(endDate).diff(dayjs()) >= 0) {\n        setTimeLeft(dayjs(endDate).diff(dayjs()));\n      } else {\n        setTimeLeft(0);\n        dispatch(finishPlanning('fail'));\n        clearInterval(intervalId);\n      }\n    }, 1000);\n    return () => {\n      clearInterval(intervalId);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <Container>\n      <dl>\n        <div>\n          <dt>\n            {timeDifferenceProcessor(timeLeft).d.toString().padStart(2, '0')}\n          </dt>\n          <dd>Days</dd>\n        </div>\n        <div>\n          <dt>\n            {timeDifferenceProcessor(timeLeft).h.toString().padStart(2, '0')}\n          </dt>\n          <dd>Hrs</dd>\n        </div>\n        <div>\n          <dt>\n            {timeDifferenceProcessor(timeLeft).m.toString().padStart(2, '0')}\n          </dt>\n          <dd>Minutes</dd>\n        </div>\n        <div>\n          <dt>\n            {timeDifferenceProcessor(timeLeft).s.toString().padStart(2, '0')}\n          </dt>\n          <dd>Seconds</dd>\n        </div>\n      </dl>\n    </Container>\n  );\n};\n","import { Container } from './MyTraining.styled';\nimport { TrainingListActive } from '../TrainingListActive/TrainingListActive';\nimport { Timer } from '../Timer/Timer';\n\nexport const MyTraining = () => {\n  return (\n    <Container>\n      <Timer></Timer>\n      <TrainingListActive></TrainingListActive>\n    </Container>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div``;\n","import { Container } from './MyGoals.styled';\nimport { useAppSelector } from '../../redux/hooks';\nimport {\n  getPlanningFromStore,\n  getStartDate,\n  getEndDate,\n  getPlanningId,\n} from '../../redux/planning/planningSlice';\nimport { IMyGoalsProps } from '../../interfaces';\nimport { getCurrentBookNumber } from '../../helpers';\n\nimport dayjs from 'dayjs';\n\nexport const MyGoals = ({\n  trainingBookList,\n  planningStartDate,\n  planningEndDate,\n}: IMyGoalsProps) => {\n  const planning = useAppSelector(getPlanningFromStore);\n\n  const startDate = useAppSelector(getStartDate);\n  const endDate = useAppSelector(getEndDate);\n  const planningId = useAppSelector(getPlanningId);\n\n  return (\n    <Container>\n      <h2>My goals</h2>\n      <ul className=\"goals-body\">\n        <li className=\"goal\">\n          <p>{planningId ? planning.books.length : trainingBookList.length}</p>\n          <p>Amount of books</p>\n        </li>\n        <li className=\"goal\">\n          <p>\n            {planningId\n              ? dayjs(endDate).diff(dayjs(startDate), 'day')\n              : dayjs(planningEndDate).diff(planningStartDate, 'day') || 0}\n          </p>\n          <p>Amount of days</p>\n        </li>\n        {planningId && (\n          <li className=\"goal\">\n            <p>\n              {planning.books.length - getCurrentBookNumber(planning.books) + 1}\n            </p>\n            <p>Books left</p>\n          </li>\n        )}\n      </ul>\n    </Container>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div``;\n","import { useState, useEffect } from 'react';\nimport { Container } from './MyTrainingResults.styled';\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\nimport { LocalizationProvider } from '@mui/x-date-pickers';\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport dayjs from 'dayjs';\nimport { TextField } from '@mui/material';\nimport { getPlanningFromStore } from '../../redux/planning/planningSlice';\nimport { nanoid } from 'nanoid';\nimport { getPlanningLoadingStatus } from '../../redux/planning/planningSlice';\nimport { useAppSelector, useAppDispatch } from '../../redux/hooks';\nimport { getPlanningStats } from '../../redux/planning/planningSlice';\nimport { updatePlanning } from '../../redux/planning/operations';\n\nimport { getCurrentBook } from '../../helpers';\n\nimport { useFormik } from 'formik';\nimport { finishPlanning } from '../../redux/planning/planningSlice';\nimport * as yup from 'yup';\nimport { IPlanningStat } from '../../interfaces';\n\nexport const MyTrainingResults = () => {\n  const planning = useAppSelector(getPlanningFromStore);\n  const status = useAppSelector(getPlanningLoadingStatus);\n  const stats = useAppSelector(getPlanningStats);\n  const dispatch = useAppDispatch();\n\n  const [pagesLimit, setPagesLimit] = useState(0);\n  const currentBook = getCurrentBook(planning.books);\n\n  useEffect(() => {\n    if (status === 'fulfilled') {\n      if (currentBook) {\n        setPagesLimit(currentBook.pagesTotal - currentBook.pagesFinished);\n      } else {\n        setPagesLimit(0);\n        dispatch(finishPlanning('success'));\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentBook, status]);\n\n  const validationSchema = yup.object({\n    pages: yup\n      .number()\n      .min(1, 'Please enter a valid value')\n      .max(pagesLimit, `You have only ${pagesLimit} pages left in this book`)\n      .required('This field is required'),\n  });\n\n  const formik = useFormik({\n    initialValues: {\n      pages: 0,\n    },\n    validationSchema: validationSchema,\n    onSubmit: values => {\n      dispatch(updatePlanning(values));\n      formik.resetForm();\n    },\n  });\n\n  const statsHandler = (stats: IPlanningStat[]) => {\n    const statsArray = [...Object.values(stats)];\n\n    if (statsArray.length <= 5) {\n      return statsArray;\n    }\n\n    return statsArray.filter((item, i, arr) => i + 1 > arr.length - 5);\n  };\n\n  const statsToShow = statsHandler(stats);\n\n  return (\n    <Container>\n      <form onSubmit={formik.handleSubmit}>\n        <LocalizationProvider dateAdapter={AdapterDayjs}>\n          <DatePicker label=\"Date\" defaultValue={dayjs()} disabled />\n        </LocalizationProvider>\n\n        <TextField\n          id=\"outlined-basic\"\n          label=\"Amount of pages\"\n          variant=\"outlined\"\n          type=\"number\"\n          name=\"pages\"\n          value={formik.values.pages}\n          onChange={formik.handleChange}\n          helperText={formik.touched.pages && formik.errors.pages}\n        />\n\n        <button type=\"submit\">Add result</button>\n      </form>\n\n      <div className=\"results-container\">\n        <h3>Statistics</h3>\n        {status === 'fulfilled'\n          ? statsToShow.map(item => (\n              <li key={nanoid()}>\n                <p>{item.time}</p>\n                <p>{item.pagesCount}</p>\n              </li>\n            ))\n          : null}\n      </div>\n    </Container>\n  );\n};\n","import styled from '@emotion/styled';\nimport { IStyledProps } from '../../interfaces';\n\nexport const Container = styled.form<IStyledProps>``;\n","import styled from '@emotion/styled';\nimport { IStyledProps } from '../../interfaces';\n\nexport const Container = styled.div<IStyledProps>``;\n","import { Container } from './TrainingList.styled';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Paper from '@mui/material/Paper';\nimport { ITrainingList } from '../../interfaces';\n\nexport const TrainingList = ({\n  trainingList,\n  removeFromTrainingListHandler,\n}: ITrainingList) => {\n  return (\n    <Container>\n      <TableContainer component={Paper}>\n        <Table sx={{ minWidth: 650 }} aria-label=\"simple table\">\n          <TableHead>\n            <TableRow>\n              <TableCell align=\"left\">Book title</TableCell>\n              <TableCell align=\"left\">Author</TableCell>\n              <TableCell align=\"left\">Year</TableCell>\n              <TableCell align=\"left\">Pages</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {trainingList.map(row => (\n              <TableRow\n                key={row._id}\n                sx={{ '&:last-of-type td, &:last-of-type th': { border: 0 } }}\n              >\n                <TableCell align=\"left\">{row.title}</TableCell>\n                <TableCell align=\"left\">{row.author}</TableCell>\n                <TableCell align=\"left\">{row.publishYear}</TableCell>\n                <TableCell align=\"left\">{row.pagesTotal}</TableCell>\n                <TableCell align=\"left\">\n                  <button\n                    type=\"button\"\n                    onClick={() => {\n                      removeFromTrainingListHandler(row._id);\n                    }}\n                  >\n                    D\n                  </button>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </Container>\n  );\n};\n","import { Container } from './MyTrainingRegistration.styled';\n\nimport { TrainingList } from '../TrainingList/TrainingList';\n\nimport dayjs from 'dayjs';\nimport { useState } from 'react';\n\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\nimport { LocalizationProvider } from '@mui/x-date-pickers';\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport { Autocomplete } from '@mui/material';\nimport TextField from '@mui/material/TextField';\nimport { IBookData, IMyTrainingProps } from '../../interfaces';\nimport { useAppSelector, useAppDispatch } from '../../redux/hooks';\n\nimport { getGoingToRead } from '../../redux/auth/authSlice';\n\nimport { createPlanning } from '../../redux/planning/operations';\nimport { getCurrentlyReading } from '../../redux/auth/authSlice';\n\n// const initialState = [] as IBookData[];\n// const initialCurrentBook = {} as IBookData;\n\nexport const MyTrainingRegistration = ({\n  trainingBookList,\n  startDate,\n  endDate,\n  updateTrainingBookList,\n  updateStartDate,\n  updateEndDate,\n  updateIsFormSubmitted,\n}: IMyTrainingProps) => {\n  // const isLoggedIn = useAppSelector(getIsLoggedIn);\n\n  const dispatch = useAppDispatch();\n  // useEffect(() => {\n  //   if (isLoggedIn) {\n  //     dispatch(getPlanning());\n  //     console.log('something');\n  //   }\n  //   // eslint-disable-next-line react-hooks/exhaustive-deps\n  // }, [isLoggedIn]);\n\n  const getCurrentDate = () => {\n    return dayjs().format('YYYY-MM-DD');\n  };\n\n  // const [trainingBookList, setTrainingBookList] = useState(initialState);\n  // const [startDate, setStartDate] = useState(getCurrentDate());\n  // const [endDate, setEndDate] = useState('');\n\n  const [currentBook, setCurrentBook] = useState<IBookData | null>(null);\n\n  const formSubmitHandler = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const queryBody = {\n      startDate,\n      endDate,\n      books: trainingBookList.map(item => item._id),\n    };\n\n    dispatch(createPlanning(queryBody));\n    // dispatch(updateBooksAfterPlanningCreation(planningBooks));\n    updateIsFormSubmitted(true);\n  };\n\n  const goingToRead = useAppSelector(getGoingToRead);\n  const currentlyReading = useAppSelector(getCurrentlyReading);\n\n  const booksList = [\n    ...goingToRead.map(item => ({ ...item, label: item.title })),\n    ...currentlyReading.map(item => ({ ...item, label: item.title })),\n  ];\n\n  const addToTrainingBookListHandler = (bookData: IBookData) => {\n    if (bookData && !trainingBookList.find(item => item._id === bookData._id)) {\n      const { title, author, publishYear, pagesTotal, _id, pagesFinished } =\n        bookData;\n      updateTrainingBookList([\n        ...trainingBookList,\n        { title, author, publishYear, pagesTotal, _id, pagesFinished },\n      ]);\n    }\n  };\n\n  const removeFromTrainingBookListHandler = (id: string) => {\n    updateTrainingBookList(\n      trainingBookList.filter((item: IBookData) => item._id !== id)\n    );\n  };\n\n  // useEffect(() => {\n  //   window.addEventListener('beforeunload', alertUser)\n  //   window.addEventListener('unload', handleEndConcert)\n  //   return () => {\n  //     window.removeEventListener('beforeunload', alertUser)\n  //     window.removeEventListener('unload', handleEndConcert)\n  //   }\n  // }, [])\n\n  // const handleEndConcert = async () => {\n  //   await fetcher({\n  //     url: endConcert(concert.id),\n  //     method: 'PUT'\n  //   })\n  // }\n\n  return (\n    <Container onSubmit={formSubmitHandler}>\n      <h2>My training</h2>\n\n      <div className=\"date-input-container\">\n        <LocalizationProvider dateAdapter={AdapterDayjs}>\n          <DatePicker\n            label=\"Start\"\n            defaultValue={dayjs(getCurrentDate())}\n            onChange={newValue => {\n              if (newValue) {\n                updateStartDate(newValue.format('YYYY-MM-DD'));\n              }\n            }}\n            disabled\n          />\n        </LocalizationProvider>\n        <LocalizationProvider dateAdapter={AdapterDayjs}>\n          <DatePicker\n            label=\"Finish\"\n            onChange={newValue => {\n              if (newValue) {\n                updateEndDate(newValue.format('YYYY-MM-DD'));\n              }\n            }}\n            disablePast\n            minDate={dayjs().add(1, 'day')}\n          />\n        </LocalizationProvider>\n      </div>\n      <div className=\"books-input-container\">\n        <Autocomplete\n          onChange={(event: any, book: IBookData | null) => {\n            if (book) {\n              setCurrentBook(book);\n            }\n          }}\n          value={currentBook}\n          disablePortal\n          isOptionEqualToValue={(option, value) => {\n            return option._id === value._id;\n          }}\n          id=\"combo-box-demo\"\n          options={booksList}\n          sx={{ width: 300 }}\n          renderInput={params => (\n            <TextField {...params} label=\"Choose books from the library \" />\n          )}\n        />\n        <button\n          type=\"button\"\n          onClick={() => {\n            if (currentBook) {\n              addToTrainingBookListHandler(currentBook);\n              setCurrentBook(null);\n            }\n          }}\n        >\n          Add\n        </button>\n\n        <button type=\"submit\">Start training</button>\n      </div>\n      <TrainingList\n        trainingList={trainingBookList}\n        removeFromTrainingListHandler={removeFromTrainingBookListHandler}\n      ></TrainingList>\n    </Container>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div``;\n","import { Container } from './Modal.styled';\n\nimport { createPortal } from 'react-dom';\nimport { IModalProps } from '../../interfaces';\nimport { useAppDispatch } from '../../redux/hooks';\nimport {\n  // getPlanningStatus,\n  deletePlanning,\n} from '../../redux/planning/planningSlice';\nimport { useNavigate } from 'react-router';\nconst modalRoot: Element | DocumentFragment =\n  document.querySelector('#modal-root')!;\n\nexport const Modal = ({\n  modalType,\n  modalCloseHandler,\n  resetTrainingRegistrationData,\n}: IModalProps) => {\n  const navigate = useNavigate();\n  // const planningStatus = useAppSelector(getPlanningStatus);\n  const dispatch = useAppDispatch();\n  switch (modalType) {\n    case 'success':\n      return createPortal(\n        <Container>\n          <p>Congratulations! You made it in time!</p>\n          <button\n            type=\"button\"\n            onClick={() => {\n              modalCloseHandler();\n              resetTrainingRegistrationData();\n              dispatch(deletePlanning());\n            }}\n          >\n            New training\n          </button>\n          <button\n            type=\"button\"\n            onClick={() => {\n              modalCloseHandler();\n              navigate('/');\n              dispatch(deletePlanning());\n            }}\n          >\n            Back\n          </button>\n        </Container>,\n        modalRoot\n      );\n    case 'fail':\n      return createPortal(\n        <Container>\n          <p>\n            Well done! but you need to be a little bit faster. You can do it)\n          </p>\n\n          <button\n            type=\"button\"\n            onClick={() => {\n              modalCloseHandler();\n              resetTrainingRegistrationData();\n              dispatch(deletePlanning());\n            }}\n          >\n            New training\n          </button>\n          <button\n            type=\"button\"\n            onClick={() => {\n              modalCloseHandler();\n              navigate('/');\n              dispatch(deletePlanning());\n            }}\n          >\n            Back\n          </button>\n        </Container>,\n        modalRoot\n      );\n    case 'book read':\n      return createPortal(\n        <Container>\n          <p>Congratulations! Another book read.</p>\n          <button\n            type=\"button\"\n            onClick={() => {\n              modalCloseHandler();\n            }}\n          >\n            Done\n          </button>\n        </Container>,\n        modalRoot\n      );\n  }\n};\n","import { Container } from './TrainingPage.styled';\nimport { useState, useEffect } from 'react';\nimport dayjs from 'dayjs';\nimport { MyTraining } from '../../components/MyTraining/MyTraining';\n\nimport { MyGoals } from '../../components/MyGoals/MyGoals';\nimport { MyTrainingResults } from '../../components/MyTrainingResults/MyTrainingResults';\nimport { MyTrainingRegistration } from '../../components/MyTrainingRegistration/MyTrainingRegistration';\nimport {\n  getPlanningStats,\n  getPlanningId,\n  getPlanningStatus,\n  getPlanningBooks,\n} from '../../redux/planning/planningSlice';\nimport { useAppSelector, useAppDispatch } from '../../redux/hooks';\nimport { getPlanningLoadingStatus } from '../../redux/planning/planningSlice';\n// import { LineChart } from '@mui/x-charts';\nimport { Modal } from '../../components/Modal/Modal';\n\nimport { processBooksData, arraySum } from '../../helpers';\nimport { IBookData } from '../../interfaces';\nimport { getSid } from '../../redux/auth/authSlice';\nimport { getPlanning } from '../../redux/planning/operations';\nimport {\n  updateBooksAfterPlanningCreation,\n  updateBookToRead,\n} from '../../redux/auth/authSlice';\nimport { detectCurrentBookNumber } from '../../redux/planning/planningSlice';\n\nconst TrainingPage = () => {\n  const stats = useAppSelector(getPlanningStats);\n  const status = useAppSelector(getPlanningLoadingStatus);\n  const planningId = useAppSelector(getPlanningId);\n  const planningStatus = useAppSelector(getPlanningStatus);\n  const books = useAppSelector(getPlanningBooks);\n  const currentBookNumber = useAppSelector(detectCurrentBookNumber);\n\n  const sid = useAppSelector(getSid);\n\n  const initialState = [] as IBookData[];\n  const getCurrentDate = () => {\n    return dayjs().format('YYYY-MM-DD');\n  };\n\n  const [trainingBookList, setTrainingBookList] = useState(initialState);\n  const [startDate, setStartDate] = useState(getCurrentDate());\n  const [endDate, setEndDate] = useState('');\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [modalType, setModalType] = useState('');\n\n  const [isFormSubmitted, setIsFormSubmitted] = useState(false);\n  const [isDataLoaded, setIsDataLoaded] = useState(false);\n\n  const updateIsFormSubmitted = (value: boolean) => {\n    setIsFormSubmitted(value);\n  };\n\n  const resetTrainingRegistrationData = () => {\n    setStartDate(getCurrentDate());\n    setEndDate('');\n    setTrainingBookList(initialState);\n  };\n\n  const dispatch = useAppDispatch();\n  useEffect(() => {\n    if (sid) {\n      dispatch(getPlanning());\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [sid]);\n\n  useEffect(() => {\n    switch (planningStatus) {\n      case 'none':\n        if (!isDataLoaded) {\n          setIsDataLoaded(true);\n        }\n        break;\n      case 'active':\n        if (!isDataLoaded) {\n          setIsDataLoaded(true);\n        }\n        if (isFormSubmitted) {\n          dispatch(updateBooksAfterPlanningCreation(books));\n        }\n\n        break;\n      case 'success':\n        setModalType('success');\n        setIsModalOpen(true);\n        break;\n      case 'fail':\n        setModalType('fail');\n        setIsModalOpen(true);\n        break;\n      default:\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [planningStatus]);\n\n  useEffect(() => {\n    if (planningStatus === 'active') {\n      // const bookNumber = getCurrentBookNumber(books);\n      // if (!bookNumber || bookNumber === 1) {\n      //   return;\n      // }\n      if (currentBookNumber && currentBookNumber !== 1 && isDataLoaded) {\n        dispatch(updateBookToRead(books[currentBookNumber - 2]));\n\n        setModalType('book read');\n\n        setIsModalOpen(true);\n      }\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentBookNumber]);\n\n  const updateTrainingBookList = (value: IBookData[]) => {\n    setTrainingBookList(value);\n  };\n\n  const updateStartDate = (value: string) => {\n    setStartDate(value);\n  };\n\n  const updateEndDate = (value: string) => {\n    setEndDate(value);\n  };\n\n  // useUnsavedChangesWarning(true);\n\n  if (status === 'fulfilled') {\n    console.log(\n      Object.values(processBooksData(Object.values(stats))).map(\n        (item, i, arr: any) => {\n          const result = (338 - arraySum(arr, i)) / (10 - i);\n          return result;\n        }\n      )\n    );\n  }\n\n  return (\n    <Container>\n      {(() => {\n        if (\n          planningStatus === 'active' ||\n          planningStatus === 'success' ||\n          planningStatus === 'fail'\n        ) {\n          return <MyTraining />;\n        }\n        if (planningStatus === 'none') {\n          return (\n            <MyTrainingRegistration\n              trainingBookList={trainingBookList}\n              startDate={startDate}\n              endDate={endDate}\n              updateTrainingBookList={updateTrainingBookList}\n              updateStartDate={updateStartDate}\n              updateEndDate={updateEndDate}\n              updateIsFormSubmitted={updateIsFormSubmitted}\n            />\n          );\n        } else {\n          return <div>Loading...</div>;\n        }\n      })()}\n      {/* {\n        // (() => {\n        //   switch (planningStatus) {\n        //     case 'active' || 'success' || 'fail':\n        //       return <MyTraining />;\n\n        //     case 'none':\n        //       return (\n        //         <MyTrainingRegistration\n        //           trainingBookList={trainingBookList}\n        //           startDate={startDate}\n        //           endDate={endDate}\n        //           updateTrainingBookList={updateTrainingBookList}\n        //           updateStartDate={updateStartDate}\n        //           updateEndDate={updateEndDate}\n        //         />\n        //       );\n        //     default:\n        //       return <div>Loading...</div>;\n        //   }\n        // })()\n\n        planningStatus === 'active' ||\n        planningStatus === 'success' ||\n        planningStatus === 'fail' ? (\n          <MyTraining />\n        ) : null\n      } */}\n      {/* {planningStatus === 'none' ? (\n        <MyTrainingRegistration\n          trainingBookList={trainingBookList}\n          startDate={startDate}\n          endDate={endDate}\n          updateTrainingBookList={updateTrainingBookList}\n          updateStartDate={updateStartDate}\n          updateEndDate={updateEndDate}\n        />\n      ) : null} */}\n\n      <MyGoals\n        trainingBookList={trainingBookList}\n        planningStartDate={startDate}\n        planningEndDate={endDate}\n      ></MyGoals>\n      {planningId && <MyTrainingResults></MyTrainingResults>}\n\n      {/* {status === 'fulfilled' ? (\n        <LineChart\n          xAxis={[\n            {\n              data: Object.keys(processBooksData(Object.values(stats))).map(\n                (item, i) => i + 1\n              ),\n\n              min: 0,\n              max: 10,\n            },\n          ]}\n          series={[\n            {\n              data: Object.values(processBooksData(Object.values(stats))),\n              curve: 'natural',\n            },\n            {\n              data: Object.values(processBooksData(Object.values(stats))).map(\n                (item, i, arr) => {\n                  const result = (338 - arraySum(arr, i)) / (10 - i);\n                  return result;\n                }\n              ),\n              curve: 'natural',\n            },\n          ]}\n          width={500}\n          height={300}\n        />\n      ) : null} */}\n      {isModalOpen && (\n        <Modal\n          modalType={modalType}\n          modalCloseHandler={() => {\n            setIsModalOpen(false);\n          }}\n          resetTrainingRegistrationData={resetTrainingRegistrationData}\n        />\n      )}\n    </Container>\n  );\n};\n\nexport default TrainingPage;\n"],"names":["Container","styled","TrainingListActive","planningBooks","useAppSelector","getPlanningBooks","TableContainer","component","Paper","Table","sx","minWidth","TableHead","TableRow","TableCell","align","TableBody","map","row","border","pagesTotal","pagesFinished","title","author","publishYear","_id","Timer","dispatch","useAppDispatch","endDate","getEndDate","useState","dayjs","diff","timeLeft","setTimeLeft","useEffect","intervalId","setInterval","finishPlanning","clearInterval","timeDifferenceProcessor","d","toString","padStart","h","m","s","MyTraining","MyGoals","trainingBookList","planningStartDate","planningEndDate","planning","getPlanningFromStore","startDate","getStartDate","planningId","getPlanningId","className","books","length","getCurrentBookNumber","MyTrainingResults","status","getPlanningLoadingStatus","stats","getPlanningStats","pagesLimit","setPagesLimit","currentBook","getCurrentBook","validationSchema","yup","pages","min","max","required","formik","useFormik","initialValues","onSubmit","values","updatePlanning","resetForm","statsToShow","statsArray","Object","filter","item","i","arr","statsHandler","handleSubmit","LocalizationProvider","dateAdapter","AdapterDayjs","DatePicker","label","defaultValue","disabled","TextField","id","variant","type","name","value","onChange","handleChange","helperText","touched","errors","time","pagesCount","nanoid","TrainingList","trainingList","removeFromTrainingListHandler","onClick","MyTrainingRegistration","updateTrainingBookList","updateStartDate","updateEndDate","updateIsFormSubmitted","setCurrentBook","goingToRead","getGoingToRead","currentlyReading","getCurrentlyReading","booksList","e","preventDefault","queryBody","createPlanning","format","newValue","disablePast","minDate","add","Autocomplete","event","book","disablePortal","isOptionEqualToValue","option","options","width","renderInput","params","bookData","find","addToTrainingBookListHandler","modalRoot","document","querySelector","Modal","modalType","modalCloseHandler","resetTrainingRegistrationData","navigate","useNavigate","createPortal","deletePlanning","planningStatus","getPlanningStatus","currentBookNumber","detectCurrentBookNumber","sid","getSid","initialState","getCurrentDate","setTrainingBookList","setStartDate","setEndDate","isModalOpen","setIsModalOpen","setModalType","isFormSubmitted","setIsFormSubmitted","isDataLoaded","setIsDataLoaded","getPlanning","updateBooksAfterPlanningCreation","updateBookToRead","console","log","processBooksData","arraySum"],"sourceRoot":""}